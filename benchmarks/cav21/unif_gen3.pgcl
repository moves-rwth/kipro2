// ARGS: --post "[c=i]" --pre "[elow+3=ehigh & n=ehigh-elow+1 & v=1 & c=0 & running=0 & (not (i < elow)) & (i <= ehigh)]*(1/4) + [not (elow+3=ehigh & n=ehigh-elow+1 & v=1 & c=0 & running=0 & (not (i < elow)) & (i <= ehigh))]*1" --checker both


# Adapted form http://www-i2.informatik.rwth-aachen.de/pub/index.php?type=download&pub_id=1233, which in turn adapted from
# Jérémie Lumbroso. Optimal Discrete Uniform Generation from Coin Flips, and Applications.
# In: CoRR abs/1304.1916 (2013).

# We want to model uniform(elow,...,ehigh)
nat elow;
nat ehigh; # Initially elow <= ehigh
nat n; # Initially ehigh-elow + 1
nat v; # Initially 1
nat c; # Initially 0; the result
nat running; # Initially 0

nat i; # auxiliary variable for array positions in specifications

while(running = 0){

    v := 2*v;
    {c := 2*c+1}[0.5]{c := 2*c};
    if((not (v<n))){
        if((not (n=c)) & (not (n<c))){ # terminate
            running := 1
        }{
            v := v-n;
            c := c-n;
        }
    }{
        skip
    }

    # On termination, determine correct index
    if((not (running = 0))){
        c := elow + c;
    }{
        skip
    }
}
